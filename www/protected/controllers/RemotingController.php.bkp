<?php
/*
insert into events (
                                                        event_id,
                                                        dt_registered,
                                                        inserted_time,
                                                        probability,
                                                       	hall,
                                                        soas_id,
                                                        network_id,
                                                        cinema_id,
                                                       	cinema,
                                                       	country_id,
                                                        city_id,
                                                        location,
                                                        client_id,
                                                        client_name,
                                                        promo_ident,
                                                        promo_name 
                                                    )
                                            select 
                                                    `e`.`event_id`,
                                                    `e`.`dt_registered` AS `dt_registered`,
                                                    `e`.`inserted_time` AS `inserted_time`,                                                    
                                                    `e`.`probability` AS `probability`,
                                                    `e`.`hall` AS `hall`,
                                                    `e`.`soas_id` AS `soas_id`,
                                                    `e`.`network_id` AS `network_id`,
                                                    `e`.`cinema_id` AS `cinema_id`,
                                                    `e`.`cinema` AS `cinema`,
                                                    `e`.`country_id` AS `country_id`,
                                                    `e`.`city_id` AS `city_id`,
                                                    `e`.`location` AS `location`,
                                                     NULL  as `client_id`,
                                                    `e`.`client_name`,
                                                    `e`.`promo_ident`,
                                                    `e`.`promo_name` 
                                            from v_idents_events as e
*/                                            
                                            
class RemotingController extends CController
{

    public function RemotingController()
    {
        //file_put_contents("remote.log",print_r($_REQUEST,true),FILE_APPEND);
    }
    
    public function actionSynchronize()
    {
        $response = array();
        try
        {
            if (!Yii::app()->signature->Validate($this))
            {
                //   throw new Exception("Incorrect signature");
            }

            if (!isset($_REQUEST['soas_id']))
            {
                throw new Exception("Undefined soas id");
            }

            $soas_id = $_REQUEST['soas_id'];

            Yii::app()->db->CreateCommand("update `soas` set `last_heart_beat` = NOW() where `soas_id` = '$soas_id'")->
                execute();
            $remote_addr = $_SERVER['REMOTE_ADDR'];

            Yii::app()->db->CreateCommand("insert into `connections_log` (`soas_id`,`remote_addr`) values ('$soas_id', '$remote_addr')")->
                execute();

            $response['result'] = 'success';
            $response['data'] = Yii::app()->db->createCommand("select lnk_soas_promo_id as id, sha1 from lnk_soas_promo where soas_id='$soas_id'")->
                queryAll();
        }
        catch (exception $e)
        {
            Yii::log($e->getMessage(), 'error');
            $response['result'] = 'error';
            $response['errorMessage'] = $e->getMessage();
        }

        echo CJSON::encode($response);
    }


    public function actionIdents()
    {
        $r = Yii::app()->db->createCommand("select * from promo_idents")->queryAll();
        echo CJSON::encode(array("result" => "success", "data" => $r));
    }

    public function actionGet($length)
    {
        $r = Yii::app()->db->createCommand("select ident from promo_idents")->
            queryColumn();
        if (count($r) >= 253)
        {
            echo CJSON::encode(array("result" => "error", "errno" => 1, "msg" =>
                "no free ident"));
            return;
        }

        while (true)
        {
            $i = rand(1, 255);
            if ($i == 15)
                continue;
            $r = Yii::app()->db->createCommand("select 1 from promo_idents where ident = '$i'")->
                queryAll();
            if (empty($r))
            {
                echo CJSON::encode(array("result" => "success", "ident" => $i));
                return;
            }
        }
    }


    public function actionRename($id, $name)
    {
        Yii::app()->db->CreateCommand("update promo_idents set `name` =  '" . addslashes
            ($name) . "' where `id` = '" . intval($id) . "'")->execute();
        echo CJSON::encode(array("result" => "success"));
    }

    public function actionAdd($ident, $length, $name)
    {
        $r = Yii::app()->db->CreateCommand("insert into promo_idents (`ident`,`length`,`name`) values ('" .
            intval($ident) . "','" . intval($length) . "', '" . addslashes($name) . "')")->
            execute();
        echo CJSON::encode(array("result" => "success", "id" => Yii::app()->db->
            getLastInsertID()));
    }

    public function actionDelete($id)
    {
        Yii::app()->db->CreateCommand("delete from promo_idents where id = '$id'")->
            execute();
        echo CJSON::encode(array("result" => "success"));
    }

    public function actionRegistration()
    {
        $response = array();
        try
        {
            if (!Yii::app()->signature->Validate($this))
            {
                throw new Exception("Incorrect signature");
            }

            $soas = new Soas;
            $soas->attributes = $_REQUEST;
            $soas->save();
            $response = array("result" => "success", "soas_id" => $soas->soas_id);
        }
        catch (exception $e)
        {
            Yii::log($e->getMessage(), 'error');
            $response['result'] = 'error';
            $response['errorMessage'] = $e->getMessage();
        }

        echo CJSON::encode($response);
    }

    public function actionAddEvent()
    {
        $response = array();
        $transaction = null;

        try
        {
            if (!isset($_REQUEST['soas_id']))
            {
                throw new Exception("Undefined soas id");
            }

            if (!Yii::app()->signature->Validate($this))
            {
                // throw new Exception("Incorrect signature");
            }

            $eventSoasId = intval($_REQUEST['soas_id']);

            $eventCount = preg_match_all('/(\d+),(\d+)(,(\d+))?/', $_REQUEST['events'], $matches);
            if ($eventCount === false)
                throw new Exception('Error parsing input string');

            if ($eventCount === 0)
                throw new Exception('No events were provided');

            $transaction = Yii::app()->db->beginTransaction();
            for ($i = 0; $i < $eventCount; ++$i)
            {
                $eventUnixTimeStamp = $matches[1][$i];
                $eventPromoId = $matches[2][$i];
                $eventModel = new PromoRegistrationEvent;
                $eventModel->dt_registered = date('Y-m-d H:i:s', $eventUnixTimeStamp);
                $eventModel->soas_id = $eventSoasId;
                $eventModel->promo_id = $eventPromoId;
                $eventModel->approved = 1;
                $eventModel->probability = (!empty($matches[4][$i])) ? $matches[4][$i] : 100;
                try
                {
                    if (!$eventModel->save())
                    {
                        Yii::log("Unable to save event: $eventUnixTimeStamp, $eventSoasId, $eventPromoId",
                            "warning");
                    }
                    else
                    {
                        $this->addEventToCache($eventModel->event_id, $eventSoasId, $eventPromoId, $eventUnixTimeStamp);
                    }
                }
                catch (exception $e)
                {
                    Yii::log("Unable to save event: $eventUnixTimeStamp, $eventSoasId, $eventPromoId",
                        "warning");
                }
            }

            $transaction->commit();
            Yii::app()->db->createCommand("update `soas` set `last_heart_beat` = NOW() where `soas_id` = '$eventSoasId'")->
                execute();

            $response['result'] = 'success';
        }
        catch (exception $e)
        {
            Yii::log($e->getMessage(), 'error');
            if ($transaction !== null)
                $transaction->rollback();

            $response['result'] = 'error';
            $response['errorMessage'] = $e->getMessage();
        }

        echo CJSON::encode($response);
    }


    private function addEventStatistic($soas_id, $promo_ident, $timestamp)
    {
        if ($promo_id = Yii::app()->db->createCommand("select id from promo_idents where ident = :ident")
        ->bindParam(":ident",$promo_ident)->queryScalar())
        {
            $hour = intval(date('H',$timestamp));            
            $date = date('Y-m-d', ($hour < 3 ) ? $timestamp - 24 * 3600 : $timestamp);
            Yii::app()->db->createCommand("INSERT INTO soas_statistic (soas_id,promo_id,`date`) VALUES (:soas_id,:promo_id,:date)ON DUPLICATE KEY UPDATE `count`=`count`+1")
            ->bindParam(":soas_id",$soas_id)
            ->bindParam(":promo_id",$promo_id)
            ->bindParam(":date",$date)
            ->execute();
            
            if ($cinema_id = Yii::app()->db->createCommand("select cinema_id from soas where soas_id = :soas_id")
            ->bindParam(":soas_id",$soas_id)->queryScalar()) {                
                Yii::app()->db->createCommand("INSERT INTO cinema_statistic (cinema_id, promo_id,`date`) VALUES (:cinema_id,:promo_id,:date)ON DUPLICATE KEY UPDATE `count`=`count`+1")
                ->bindParam(":cinema_id",$cinema_id)
                ->bindParam(":promo_id",$promo_id)
                ->bindParam(":date",$date)
                ->execute();
            }            
        }        
    }

    private function addEventToCache($event_id, $soas_id, $promo_ident, $timestamp)
    {
        try
        {
            $last_ts = Yii::app()->db->createCommand("select 
                                                            unix_timestamp(dt_registered)
                                                        from 
                                                            events 
                                                        where 
                                                            soas_id = :soas_id
                                                        and
                                                            promo_ident = :promo_ident
                                                        order by `dt_registered` desc
                                                        limit 1")->bindParam(":soas_id",
                $soas_id)->bindParam(":promo_ident", $promo_ident)->queryScalar();

            if (!$last_ts || $timestamp - $last_ts > 60)
            {
                Yii::app()->db->createCommand("                                
                                insert into events (
                                                        event_id,
                                                        dt_registered,
                                                        inserted_time,
                                                        probability,
                                                       	hall,
                                                        soas_id,
                                                        network_id,
                                                        cinema_id,
                                                       	cinema,
                                                       	country_id,
                                                        city_id,
                                                        location,
                                                        client_id,
                                                        client_name,
                                                        promo_ident,
                                                        promo_name 
                                                    )
                                            select 
                                                    `e`.`promo_idents_event_id`,
                                                    `e`.`dt_registered` AS `dt_registered`,
                                                    `e`.`inserted_time` AS `inserted_time`,                                                    
                                                    `e`.`probability` AS `probability`,
                                                    `s`.`hall` AS `hall`,
                                                    `s`.`soas_id` AS `soas_id`,
                                                    `s`.`network_id` AS `network_id`,
                                                    `s`.`cinema_id` AS `cinema_id`,
                                                    `s`.`cinema` AS `cinema`,
                                                    `s`.`country_id` AS `country_id`,
                                                    `s`.`city_id` AS `city_id`,
                                                    `s`.`location` AS `location`,
                                                    `clients`.`client_id`,
                                                    `clients`.`name` AS `client_name`,
                                                    `e`.`promo_ident` AS `promo_ident`,
                                                    `p`.`name` AS `promo_name` 
                                            from 
                                                    ((`promo_idents_events` `e` join `v_soas` `s`) 
                                                join 
                                                    (`promo_idents` `p` left join `clients` on((`p`.`client_id` = `clients`.`client_id`)))) 
                                                where 
                                                    ((`e`.`promo_idents_event_id` = :event_id) and (`e`.`soas_id` = `s`.`soas_id`) and (`e`.`promo_ident` = `p`.`ident`))")->
                    bindParam(":event_id", $event_id)->execute();
                    
                    
                    Yii::app()->db->createCommand("update events set  dt_registered = dt_registered - INTERVAL 1000 YEAR where YEAR(dt_registered) = 3011")->execute();
                    
                    return true;
            }
        }
        catch (exception $e)
        {
            Yii::log("Add event to cache error (" . $e->getMessage() . ")", "warning");
        }
        return false;
}

public function actionAddIdentEvent()
{
    $response = array();
    $transaction = null;

    try
    {
        if (!isset($_REQUEST['soas_id']))
        {
            throw new Exception("Undefined soas id");
        }

        if (!Yii::app()->signature->Validate($this))
        {
            // throw new Exception("Incorrect signature");
        }

        $eventSoasId = intval($_REQUEST['soas_id']);

        $eventCount = preg_match_all('/(\d+),(\d+)(,(\d+))?/', $_REQUEST['events'], $matches);
        if ($eventCount === false)
            throw new Exception('Error parsing input string');

        if ($eventCount === 0)
            throw new Exception('No events were provided');

        $transaction = Yii::app()->db->beginTransaction();
        for ($i = 0; $i < $eventCount; ++$i)
        {
            $eventUnixTimeStamp = intval($matches[1][$i]);
            $eventPromoId = intval($matches[2][$i]);
            $eventModel = new PromoRegistrationIdentEvent;
            $eventModel->dt_registered = date('Y-m-d H:i:s', $eventUnixTimeStamp);
            $eventModel->soas_id = $eventSoasId;
            $eventModel->promo_ident = $eventPromoId;
            $eventModel->probability = (!empty($matches[4][$i])) ? intval($matches[4][$i]) : 100;

            try
            {
                if ($eventModel->save())
                {                    
                    if ($this->addEventToCache($eventModel->promo_idents_event_id, $eventSoasId, $eventPromoId, $eventUnixTimeStamp)) {                        
                        $this->addEventStatistic($eventSoasId, $eventPromoId, $eventUnixTimeStamp);
                    }
                }
                else
                {
                    throw new Exception("CModel::save return false");
                }
            }
            catch (exception $e)
            {
                Yii::log("Unable to save event: $eventUnixTimeStamp, $eventSoasId, $eventPromoId (" .
                    $e->getMessage() . ")", "warning");
            }
        }

        $transaction->commit();


        Yii::app()->db->createCommand("update `soas` set `last_heart_beat` = NOW() where `soas_id` = '$eventSoasId'")->
            execute();

        $response['result'] = 'success';
    }
    catch (exception $e)
    {
        Yii::log($e->getMessage(), 'error');
        if ($transaction !== null)
            $transaction->rollback();

        $response['result'] = 'error';
        $response['errorMessage'] = $e->getMessage();
    }

    echo CJSON::encode($response);
}
}
